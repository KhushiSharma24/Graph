/* Breadth First Search*/

import java.util.*;
public class BFS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        ArrayList<ArrayList<Integer>> g = new ArrayList<>();
        // creating n number of vertices in graph
        for(int i=0;i<=n;i++){
            g.add(new ArrayList<Integer>());
        }
        // reading edges of graph
        for(int i=1;i<=m;i++){
            int x=sc.nextInt();
            int y= sc.nextInt();
            g.get(x).add(y);
            g.get(y).add(x);
        }
        Queue<Integer> q=new LinkedList<>();
        q.add(1);
        int[] visited=new int[n+5];
        visited[1]=1;
        int [] lvl=new int[n+5];
        lvl[1]=0;
        while(!q.isEmpty()){
            int v=q.remove();
            System.out.println(v+ " " +lvl[v]);
            for(int i=0;i<g.get(v).size();i++){        // iterating through all nodes connected to node v
                int u=g.get(v).get(i);
                if(visited[u]==0){
                    q.add(u);
                    visited[u]=1;
                    lvl[u]=lvl[v]+1;
                }
            }
        }

    }
}


INPUT:
5 4 
1 2
2 3 
3 4 
4 5 

OUTPUT:
1 0
2 1
3 2
4 3
5 4
