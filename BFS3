import java.util.*;

public class BFS3 {
    public static void main(String[] args){
        //Number of shortest path from the source node to all other nodes
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        List<Integer> [] g=new List[n+5];
        for(int i=0;i<n+5;i++){
            g[i]=new ArrayList<Integer>();
        }
        for(int i=1;i<=m;i++){
            int x=sc.nextInt();
            int y=sc.nextInt();
            g[x].add(y);
            g[y].add(x);
        }
        Queue<Integer> q=new LinkedList<>();
        q.offer(1);
        int [] ways=new int[n+5];
        ways[1]=1;
        int [] used=new int[n+5];
        used[1]=1;
        int [] lvl=new int[n+5];
        lvl[1]=0;
        while(!q.isEmpty()) {
            int v = q.poll();
            System.out.println(v + " " + ways[v]);
            System.out.println();
            for(int u:g[v]){
                if(used[u]==0){
                    q.offer(u);
                    used[u]=1;
                    lvl[u]=lvl[v]+1;
                    ways[u]=ways[u]+ways[v];
                }
                else{
                    if(lvl[v]+1==lvl[u]){
                        ways[u]=ways[u]+ways[v];
                    }
                }
            }
        }

    sc.close();

    }
}

INPUT:
8 
10 
1 2
1 3
2 4 
2 5 
3 6 
3 7 
5 8
5 4
6 7
1 5

OUTPUT:
1 1
2 1
3 1
5 1
4 2
6 1
7 1
8 1
Process finished with exit code 0
