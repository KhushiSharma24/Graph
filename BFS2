/* For each node in the graph find if it is reachable or not from the source node. */


import java.util.*;
public class BFS2 {
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m= sc.nextInt();
        List<Integer>[] g = new ArrayList[n + 5];
        for (int i = 0; i <=n; i++) {
            g[i] = new ArrayList<>();
        }
        for(int i=0;i<m;i++){
            int x=sc.nextInt();
            int y=sc.nextInt();
            g[x].add(y);
            g[y].add(x);
        }
        Queue<Integer> q=new LinkedList<>();
        int so=sc.nextInt();
        q.offer(so);
        int[] used=new int[n+5];
        Arrays.fill(used,0);
        used[so]=1;
        int lvl[]=new int[n+5];
        Arrays.fill(lvl,0);
        lvl[so]=0;
        while (!q.isEmpty()){
            int v=q.poll();
            for(int u:g[v]){
                if(used[u]==0){
                    q.offer(u);
                    used[u]=1;
                    lvl[u]=lvl[v]+1;
                }
            }
        }
        for(int i=1;i<=n;i++){
            if(used[i]==0){
                System.out.println("You cannot visit the node " + i + " from the source node = " + so);
            }
            else{
                System.out.println("You can visit the node " + i + " from the source node = " + so);
            }
        }
    }
}

INPUT:
5 3
1 2 
3 2
3 4
1

OUTPUT:
You can visit the node 1 from the source node = 1
You can visit the node 2 from the source node = 1
You can visit the node 3 from the source node = 1
You can visit the node 4 from the source node = 1
You cannot visit the node 5 from the source node = 1

